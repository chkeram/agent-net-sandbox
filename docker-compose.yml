version: '3.8'

services:
  # Multi-Protocol Agent Orchestrator
  orchestrator:
    build:
      context: ./agents/orchestrator
      dockerfile: Dockerfile
    image: agent-orchestrator:latest
    container_name: agent-orchestrator
    ports:
      - "8004:8004"
    volumes:
      # Mount logs directory
      - orchestrator-logs:/app/logs
      # Mount data directory for persistence
      - orchestrator-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - agent-network
    labels:
      - "agent.protocol=orchestrator"
      - "agent.type=orchestrator"
      - "agent.name=Multi-Protocol Agent Orchestrator"
      - "agent.version=0.1.0"
      - "agent.capabilities=routing,discovery,management"
      - "service.description=AI-powered multi-protocol agent orchestrator"
    depends_on:
      - acp-hello-world

  # ACP Hello World Agent
  acp-hello-world:
    build:
      context: ./agents/acp-hello-world
      dockerfile: Dockerfile
    image: acp-hello-world-agent:latest
    container_name: acp-hello-world-agent
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - PYTHONPATH=/app/src
      - AGENT_TYPE=acp
      - AGENT_NAME=hello-world
    volumes:
      # Mount configuration files for development
      - ./agents/acp-hello-world/agent-manifest.yaml:/app/agent-manifest.yaml:ro
      - ./agents/acp-hello-world/acp-descriptor.json:/app/acp-descriptor.json:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - agent-network
    labels:
      - "agent.protocol=acp"
      - "agent.type=hello-world"
      - "agent.version=0.1.0"

  # React Frontend Interface
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production  # Use production build by default
    image: agent-frontend:latest
    container_name: agent-frontend
    ports:
      - "3000:80"  # Production nginx on port 80, exposed as 3000
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:8004
      - VITE_APP_TITLE=Agent Network Sandbox
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      - orchestrator
    networks:
      - agent-network
    labels:
      - "service.type=frontend"
      - "service.description=React chat interface for multi-protocol agent orchestrator"
      - "service.port=3000"
      - "service.protocol=http"

  # Agent Directory Service (Mock)
  agent-directory:
    image: nginx:alpine
    container_name: agent-directory
    ports:
      - "8080:80"
    volumes:
      - ./scripts/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./scripts/agent-directory.html:/usr/share/nginx/html/index.html:ro
    depends_on:
      - acp-hello-world
    networks:
      - agent-network
    labels:
      - "service.type=directory"
      - "service.description=Mock agent directory for development"

  # A2A Math Operations Agent
  a2a-math-agent:
    build:
      context: ./agents/a2a-math-agent
      dockerfile: Dockerfile
    image: a2a-math-agent:latest
    container_name: a2a-math-agent
    ports:
      - "8002:8002"
    environment:
      - A2A_PORT=8002
      - HOST=0.0.0.0
      - PYTHONPATH=/app
      # LLM Configuration (optional - uncomment and set to enable)
      # - LLM_PROVIDER=openai
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # - GEMINI_API_KEY=${GEMINI_API_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/.well-known/agent-card"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - agent-network
    labels:
      - "agent.protocol=a2a"
      - "agent.type=math"
      - "agent.name=A2A Math Operations Agent"
      - "agent.version=0.1.0"
      - "agent.port=8002"
      - "agent.capabilities=arithmetic,advanced-math,algebra"
      - "service.description=Mathematical computation agent using A2A Protocol SDK"

  # Future agents will be added here...
  # Example structure for other protocols:
  # 
  # mcp-example-agent:
  #   build:
  #     context: ./agents/mcp-example
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8001:8000"
  #   networks:
  #     - agent-network
  #   labels:
  #     - "agent.protocol=mcp"

networks:
  agent-network:
    driver: bridge
    name: agent-network

volumes:
  agent-data:
    driver: local
  orchestrator-logs:
    driver: local
  orchestrator-data:
    driver: local